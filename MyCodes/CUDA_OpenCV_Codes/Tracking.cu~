#include<iostream>
#include<cstdio>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<cuda_runtime.h>

using std::cout;
using std::endl;

__global__ void Kernel(unsigned char* FrameA,unsigned char* FrameB,unsigned char* Frame,unsigned char* Gray,unsigned char* Bin,unsigned char* Ero,unsigned char* Dil,unsigned char* Ex,unsigned char* FrameF,int width,int height,int colorWidthStep,
 int grayWidthStep)
{
	
	const int xIndex = blockIdx.x * blockDim.x + threadIdx.x;
	const int yIndex = blockIdx.y * blockDim.y + threadIdx.y;
	
	if((xIndex>0)  && (yIndex>0) && (xIndex<width) && (yIndex<height))
	{
		const int color_tid = yIndex * colorWidthStep + (3 * xIndex);
		const int gray_tid  = yIndex * grayWidthStep + xIndex;

		Frame[color_tid]=FrameA[color_tid]-FrameB[color_tid];	
		Frame[color_tid+1]=FrameA[color_tid+1]-FrameB[color_tid+1];	
		Frame[color_tid+2]=FrameA[color_tid+2]-FrameB[color_tid+2];	
	
		__syncthreads();

		const unsigned char blue	= Frame[color_tid];
		const unsigned char green	= Frame[color_tid + 1];
		const unsigned char red		= Frame[color_tid + 2];

		const float gray = red * 0.3f + green * 0.59f + blue * 0.11f;

		Gray[gray_tid] = static_cast<unsigned char>(gray);	

		__syncthreads();

		if(Gray[gray_tid]>200)
			Bin[gray_tid]=255;
		else
			Bin[gray_tid]=0;

		__syncthreads();	

		const int tidA = (yIndex) * grayWidthStep + (xIndex);
		const int tidB = (yIndex-1) * grayWidthStep + (xIndex);
		const int tidC = (yIndex+1) * grayWidthStep + (xIndex);
		const int tidD = (yIndex) * grayWidthStep + (xIndex-1);
		const int tidE = (yIndex) * grayWidthStep + (xIndex+1);		
	
		if((Bin[tidA]==255)||(Bin[tidB]==255)||(Bin[tidC]==255)||(Bin[tidD]==255)||(Bin[tidE]==255))
		Ero[gray_tid]=255;
		else
		Ero[gray_tid]=0;
		
		__syncthreads();

		if((Ero[tidA]==255)||(Ero[tidB]==255)||(Ero[tidC]==255)||(Ero[tidD]==255)||(Ero[tidE]==255))
		Dil[gray_tid]=255;
		else
		Dil[gray_tid]=0;	

		__syncthreads();	

		if((Dil[tidA]==255)||(Dil[tidB]==255)||(Dil[tidC]==255)||(Dil[tidD]==255)||(Dil[tidE]==255))
		Ex[gray_tid]=255;
		else
		Ex[gray_tid]=0;	

		__syncthreads();	

		if((Ex[tidA]==255)&&(Ex[tidB]==255)&&(Ex[tidC]==255)&&(Ex[tidD]==255)&&(Ex[tidE]==255))
		FrameF[gray_tid]=255;
		else
		FrameF[gray_tid]=0;	
	
		
	}
}


void ImageGrayConverter(const cv::Mat& FrameA, const cv::Mat& FrameB, cv::Mat& FrameFinal)
{
	
	const int colorBytes = FrameA.step * FrameA.rows;
	const int grayBytes = FrameFinal.step * FrameFinal.rows;

	unsigned char *D_FrameA, *D_FrameB, *D_Frame;

	unsigned char *D_Gray, *D_Bin, *D_Ero, *D_Dil, *D_Ex, *D_FrameFinal;
	
	cudaMalloc<unsigned char>(&D_FrameA,colorBytes);
	cudaMalloc<unsigned char>(&D_FrameB,colorBytes);
	cudaMalloc<unsigned char>(&D_Frame,colorBytes);

	cudaMalloc<unsigned char>(&D_Gray,grayBytes);
	cudaMalloc<unsigned char>(&D_Bin,grayBytes);
	cudaMalloc<unsigned char>(&D_Ero,grayBytes);
	cudaMalloc<unsigned char>(&D_Dil,grayBytes);
	cudaMalloc<unsigned char>(&D_Ex,grayBytes);
		
	cudaMalloc<unsigned char>(&D_FrameFinal,grayBytes);
	
	cudaMemcpy(D_FrameA, FrameA.ptr(),colorBytes,cudaMemcpyHostToDevice);
	cudaMemcpy(D_FrameB, FrameB.ptr(),colorBytes,cudaMemcpyHostToDevice);
		
	const dim3 block(16,16);
	
	const dim3 grid((FrameA.cols + block.x - 1)/block.x, (FrameA.rows + block.y - 1)/block.y);
	
	Kernel<<<grid,block>>>(D_FrameA,D_FrameB,D_Frame,D_Gray,D_Bin,D_Ero,D_Dil,D_Ex,D_FrameFinal,
				FrameA.cols,FrameA.rows,FrameA.step,FrameFinal.step);
	
	cudaDeviceSynchronize();	
	
	cudaMemcpy(FrameFinal.ptr(),D_FrameFinal,grayBytes,cudaMemcpyDeviceToHost);
	
	cudaFree(D_FrameA);
	cudaFree(D_FrameB);
	cudaFree(D_Frame);
	cudaFree(D_Gray);
	cudaFree(D_Bin);
	cudaFree(D_Ero);
	cudaFree(D_Dil);
	cudaFree(D_Ex);			
	cudaFree(D_FrameFinal);
}

using namespace std;
using namespace cv;

int main(int argc, char** argv)
{
	Mat InputA;	
	Mat InputB;

	cv::VideoCapture cap;
//	cap.open(0); 						
	cap.open(string(argv[1])); 						

	while(1)
	{	
		cap>>InputA;
		cap>>InputB;				
     
		cv::Mat FrameFinal(InputA.rows,InputA.cols,CV_8U);

		ImageGrayConverter(InputA,InputB,FrameFinal);
			
		cv::imshow("Input",InputA);		
		cv::imshow("Output",FrameFinal);
		
		if(cv::waitKey(33)>=0) break;	
	}	
	return 0;
}
