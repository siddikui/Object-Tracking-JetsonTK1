#include<iostream>
#include<cstdio>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<cuda_runtime.h>

using std::cout;
using std::endl;

__global__ void bgr_to_gray_kernel( unsigned char* input, unsigned char* output, unsigned char* outputA, int width, int height, int widthstep)
{
	
	const int xIndex = blockIdx.x * blockDim.x + threadIdx.x;
	const int yIndex = blockIdx.y * blockDim.y + threadIdx.y;	
	
//	unsigned char outputA[640*480];
	//float Mask[3*3]={1,2,1,0,0,0,-1,-2,-1};
	//float Mask[3*3]={-1,0,1,-2,0,2,-1,0,1};
	//float Mask[3*3]={1,2,1,0,0,0,-1,-2,-1};
	
	if((xIndex>0)  && (yIndex>0) && (xIndex<width) && (yIndex<height))
	{
		//int i,j;
		//int gray=0;		

		const int tid = yIndex * widthstep + xIndex;
		const int tidA = (yIndex-1) * widthstep + (xIndex-1);
		const int tidB = (yIndex-1) * widthstep + xIndex;
		const int tidC = yIndex * widthstep + (xIndex-1);
		
		if(input[tid]>100)
			outputA[tid]=255;
		else
			outputA[tid]=0;	

		__syncthreads();
		
		//outputA[tid]=output[tid];
		
	//	__syncthreads();
		
		if((outputA[tid]>=100)&&(outputA[tidA]>=100)&&(outputA[tidB]>=100)&&(outputA[tidC]>=100))
		output[tid]=255;
		else
		output[tid]=0;
	
		/*for(i=-1;i<=1;i++)
		for(j=-1;j<=1;j++)
		gray += input[(yIndex+i)*widthstep + (xIndex+j)]*Mask[(i+1)*3+(j+1)];

		

		output[tid] = static_cast<unsigned int>(gray);		
	*/	
	}
}

void convert_to_gray(const cv::Mat& input, cv::Mat& output)
{
	
	const int Bytes = input.step * input.rows;	

	unsigned char *d_input, *d_output,*d_outputA;
	
	cudaMalloc<unsigned char>(&d_input,Bytes);
	cudaMalloc<unsigned char>(&d_output,Bytes);
	cudaMalloc<unsigned char>(&d_outputA,Bytes);
	
	cudaMemcpy(d_input,input.ptr(),Bytes,cudaMemcpyHostToDevice);
	
	const dim3 block(16,16);
	
	const dim3 grid((input.cols + block.x - 1)/block.x, (input.rows + block.y - 1)/block.y);
	
	bgr_to_gray_kernel<<<grid,block>>>(d_input,d_output,d_outputA,input.cols,input.rows,input.step);
	
	cudaDeviceSynchronize();
	
	cudaMemcpy(output.ptr(),d_output,Bytes,cudaMemcpyDeviceToHost);
	
	cudaFree(d_input);
	cudaFree(d_output);
}

int main()
{
	std::string imagePath = "image.jpg";

	
	cv::Mat Input = cv::imread(imagePath,CV_LOAD_IMAGE_GRAYSCALE);
	cv::Mat Output(Input.rows,Input.cols,CV_8U);

	if(Input.empty())
	{
		std::cout<<"Image Not Found!"<<std::endl;
		std::cin.get();
		return -1;
	}
	
	convert_to_gray(Input,Output);

	cv::imshow("Input",Input);
	cv::imshow("Output",Output);
	
	cv::waitKey();

	return 0;
}
